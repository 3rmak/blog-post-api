# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthLoginDto {
  email: String!
  password: String!
}

type AuthResponseDto {
  token: String!
  user: User!
}

type Blog {
  blogPosts: [BlogPost!]!
  description: String!
  id: ID!
  name: String!
  publisher: User!
}

input BlogCreateDto {
  description: String!
  name: String!
}

type BlogPost {
  avatar: String!
  blog: Blog!
  createdAt: DateTime!
  description: String!
  id: ID!
  status: String!
  title: String!
}

enum BlogPostDecisionEnum {
  PUBLISH
  REJECT
}

input CreateBlogPostDto {
  avatar: Upload!
  blogId: String!
  description: String!
  title: String!
}

input CreateUserInput {
  email: String!
  fullName: String
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createBlog(createBlogInput: BlogCreateDto!): Blog!
  createBlogPost(createBlogPostInput: CreateBlogPostDto!): BlogPost!
  createModeratorUser(createUserInput: CreateUserInput!): User!
  createUser(createUserInput: CreateUserInput!): User!
  deleteBlogById(blogId: String!): Void!
  deleteBlogPost(blogPostId: String!): Void!
  deleteUserProfile: Void!
  handleModeratorDecision(moderatorDecisionBlogPostInput: UpdateBlogPostDecisionDto!): BlogPost!
  login(authLoginInput: AuthLoginDto!): AuthResponseDto!
  patchBlog(updateBlogInput: UpdateBlogDto!): Blog!
  updateBlogPost(updateBlogPostInput: UpdateBlogPostDto!): BlogPost!
  updateUserProfile(updateUserInput: UpdateUserInput!): User!
}

type PaginatedBlogPostResponseDto {
  data: [BlogPost!]!
  page: Float!
  perPage: Float!
  total: Float!
  totalPages: Float!
}

type PaginatedBlogResponseDto {
  data: [Blog!]!
  page: Float!
  perPage: Float!
  total: Float!
  totalPages: Float!
}

input PaginationDto {
  page: Float
  per_page: Float
}

type Query {
  getBlogPostById(blogPostId: String!): BlogPost!
  getPaginatedBlogsList(paginateDtoInput: PaginationDto!): PaginatedBlogResponseDto!
  getPostsByBlogId(blogId: String!, paginateDtoInput: PaginationDto!): PaginatedBlogPostResponseDto!
}

type Role {
  id: Float!
  users: [User!]!
  value: String!
}

input UpdateBlogDto {
  blogId: ID!
  description: String
  name: String
}

input UpdateBlogPostDecisionDto {
  blogPostId: ID!
  decision: BlogPostDecisionEnum!
}

input UpdateBlogPostDto {
  blogPostId: ID!
  description: String
  title: String
}

input UpdateUserInput {
  fullName: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  blogs: [Blog!]
  email: String!
  fullName: String
  id: ID!
  password: String!
  role: Role!
}

"""Represents NULL values"""
scalar Void